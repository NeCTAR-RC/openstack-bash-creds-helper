name: Build oscreds

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GPGME dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          export NEEDRESTART_MODE=l
          sudo apt-get update -y
          sudo apt-get install -y libgpgme-dev pkg-config

      - name: Install GPGME dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gpgme

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Set version
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "VERSION=1.0.${{ github.run_number }}-${SHORT_SHA}" >> $GITHUB_ENV

      - name: Build oscreds
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -o oscreds-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.VERSION }} ./...

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: oscreds-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.VERSION }}
          path: oscreds-${{ matrix.goos }}-${{ matrix.goarch }}-${{ env.VERSION }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Set version
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "VERSION=1.0.${{ github.run_number }}-${SHORT_SHA}" >> $GITHUB_ENV
          echo "CHANGELOG=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Create GitHub Release
        run: |
          gh release create ${{ env.VERSION }} ./artifacts/*/* \
            --title "Release ${{ env.VERSION }}" \
            --notes "${{ env.CHANGELOG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        run: |
          for file in ./artifacts/*/*; do
            echo "Uploading $file"
            gh release upload ${{ env.VERSION }} "$file" --repo ${{ github.repository }}
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
